// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package calico

import (
	"context"
	"fmt"
	"io"

	api "git.fd.io/govpp.git/api"
	vpe "github.com/projectcalico/vpp-dataplane/vpplink/binapi/20.09-rc0~304-gb66b66d74/vpe"
)

// RPCService defines RPC service  calico.
type RPCService interface {
	CalicoAddDelSnatPrefix(ctx context.Context, in *CalicoAddDelSnatPrefix) (*CalicoAddDelSnatPrefixReply, error)
	CalicoSessionDump(ctx context.Context, in *CalicoSessionDump) (RPCService_CalicoSessionDumpClient, error)
	CalicoSessionPurge(ctx context.Context, in *CalicoSessionPurge) (*CalicoSessionPurgeReply, error)
	CalicoSetSnatAddresses(ctx context.Context, in *CalicoSetSnatAddresses) (*CalicoSetSnatAddressesReply, error)
	CalicoTranslationDel(ctx context.Context, in *CalicoTranslationDel) (*CalicoTranslationDelReply, error)
	CalicoTranslationDump(ctx context.Context, in *CalicoTranslationDump) (RPCService_CalicoTranslationDumpClient, error)
	CalicoTranslationUpdate(ctx context.Context, in *CalicoTranslationUpdate) (*CalicoTranslationUpdateReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) CalicoAddDelSnatPrefix(ctx context.Context, in *CalicoAddDelSnatPrefix) (*CalicoAddDelSnatPrefixReply, error) {
	out := new(CalicoAddDelSnatPrefixReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoSessionDump(ctx context.Context, in *CalicoSessionDump) (RPCService_CalicoSessionDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_CalicoSessionDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_CalicoSessionDumpClient interface {
	Recv() (*CalicoSessionDetails, error)
	api.Stream
}

type serviceClient_CalicoSessionDumpClient struct {
	api.Stream
}

func (c *serviceClient_CalicoSessionDumpClient) Recv() (*CalicoSessionDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *CalicoSessionDetails:
		return m, nil
	case *vpe.ControlPingReply:
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) CalicoSessionPurge(ctx context.Context, in *CalicoSessionPurge) (*CalicoSessionPurgeReply, error) {
	out := new(CalicoSessionPurgeReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoSetSnatAddresses(ctx context.Context, in *CalicoSetSnatAddresses) (*CalicoSetSnatAddressesReply, error) {
	out := new(CalicoSetSnatAddressesReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoTranslationDel(ctx context.Context, in *CalicoTranslationDel) (*CalicoTranslationDelReply, error) {
	out := new(CalicoTranslationDelReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CalicoTranslationDump(ctx context.Context, in *CalicoTranslationDump) (RPCService_CalicoTranslationDumpClient, error) {
	stream, err := c.conn.NewStream(ctx)
	if err != nil {
		return nil, err
	}
	x := &serviceClient_CalicoTranslationDumpClient{stream}
	if err := x.Stream.SendMsg(in); err != nil {
		return nil, err
	}
	if err = x.Stream.SendMsg(&vpe.ControlPing{}); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_CalicoTranslationDumpClient interface {
	Recv() (*CalicoTranslationDetails, error)
	api.Stream
}

type serviceClient_CalicoTranslationDumpClient struct {
	api.Stream
}

func (c *serviceClient_CalicoTranslationDumpClient) Recv() (*CalicoTranslationDetails, error) {
	msg, err := c.Stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	switch m := msg.(type) {
	case *CalicoTranslationDetails:
		return m, nil
	case *vpe.ControlPingReply:
		return nil, io.EOF
	default:
		return nil, fmt.Errorf("unexpected message: %T %v", m, m)
	}
}

func (c *serviceClient) CalicoTranslationUpdate(ctx context.Context, in *CalicoTranslationUpdate) (*CalicoTranslationUpdateReply, error) {
	out := new(CalicoTranslationUpdateReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
