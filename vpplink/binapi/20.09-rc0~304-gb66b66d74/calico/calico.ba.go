// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.4.0-dev
//  VPP:              unknown

// Package calico contains generated bindings for API file calico.api.
//
// Contents:
//   1 enum
//   4 structs
//  14 messages
//
package calico

import (
	"strconv"

	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	_ "github.com/projectcalico/vpp-dataplane/vpplink/binapi/20.09-rc0~304-gb66b66d74/fib_types"
	ip_types "github.com/projectcalico/vpp-dataplane/vpplink/binapi/20.09-rc0~304-gb66b66d74/ip_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "calico"
	APIVersion = "0.1.0"
	VersionCrc = 0x94a2c54
)

// CalicoTranslationFlags defines enum 'calico_translation_flags'.
type CalicoTranslationFlags uint8

const (
	CALICO_TRANSLATION_ALLOC_PORT CalicoTranslationFlags = 1
)

var (
	CalicoTranslationFlags_name = map[uint8]string{
		1: "CALICO_TRANSLATION_ALLOC_PORT",
	}
	CalicoTranslationFlags_value = map[string]uint8{
		"CALICO_TRANSLATION_ALLOC_PORT": 1,
	}
)

func (x CalicoTranslationFlags) String() string {
	s, ok := CalicoTranslationFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := CalicoTranslationFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "CalicoTranslationFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// CalicoEndpoint defines type 'calico_endpoint'.
type CalicoEndpoint struct {
	Addr ip_types.Address `binapi:"address,name=addr" json:"addr,omitempty"`
	Port uint16           `binapi:"u16,name=port" json:"port,omitempty"`
}

// CalicoEndpointTuple defines type 'calico_endpoint_tuple'.
type CalicoEndpointTuple struct {
	DstEp CalicoEndpoint `binapi:"calico_endpoint,name=dst_ep" json:"dst_ep,omitempty"`
	SrcEp CalicoEndpoint `binapi:"calico_endpoint,name=src_ep" json:"src_ep,omitempty"`
}

// CalicoSession defines type 'calico_session'.
type CalicoSession struct {
	Src       CalicoEndpoint   `binapi:"calico_endpoint,name=src" json:"src,omitempty"`
	Dst       CalicoEndpoint   `binapi:"calico_endpoint,name=dst" json:"dst,omitempty"`
	New       CalicoEndpoint   `binapi:"calico_endpoint,name=new" json:"new,omitempty"`
	IPProto   ip_types.IPProto `binapi:"ip_proto,name=ip_proto" json:"ip_proto,omitempty"`
	Timestamp float64          `binapi:"f64,name=timestamp" json:"timestamp,omitempty"`
}

// CalicoTranslation defines type 'calico_translation'.
type CalicoTranslation struct {
	Vip      CalicoEndpoint        `binapi:"calico_endpoint,name=vip" json:"vip,omitempty"`
	ID       uint32                `binapi:"u32,name=id" json:"id,omitempty"`
	IPProto  ip_types.IPProto      `binapi:"ip_proto,name=ip_proto" json:"ip_proto,omitempty"`
	IsRealIP uint8                 `binapi:"u8,name=is_real_ip" json:"is_real_ip,omitempty"`
	Flags    uint8                 `binapi:"u8,name=flags" json:"flags,omitempty"`
	NPaths   uint8                 `binapi:"u8,name=n_paths" json:"-"`
	Paths    []CalicoEndpointTuple `binapi:"calico_endpoint_tuple[n_paths],name=paths" json:"paths,omitempty"`
}

// CalicoAddDelSnatPrefix defines message 'calico_add_del_snat_prefix'.
type CalicoAddDelSnatPrefix struct {
	IsAdd  uint8           `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Prefix ip_types.Prefix `binapi:"prefix,name=prefix" json:"prefix,omitempty"`
}

func (m *CalicoAddDelSnatPrefix) Reset()               { *m = CalicoAddDelSnatPrefix{} }
func (*CalicoAddDelSnatPrefix) GetMessageName() string { return "calico_add_del_snat_prefix" }
func (*CalicoAddDelSnatPrefix) GetCrcString() string   { return "e26dd79a" }
func (*CalicoAddDelSnatPrefix) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoAddDelSnatPrefix) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.Prefix.Address.Af
	size += 1 * 16 // m.Prefix.Address.Un
	size += 1      // m.Prefix.Len
	return size
}
func (m *CalicoAddDelSnatPrefix) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(uint8(m.Prefix.Address.Af))
	buf.EncodeBytes(m.Prefix.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Prefix.Len)
	return buf.Bytes(), nil
}
func (m *CalicoAddDelSnatPrefix) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Prefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Prefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Prefix.Len = buf.DecodeUint8()
	return nil
}

// CalicoAddDelSnatPrefixReply defines message 'calico_add_del_snat_prefix_reply'.
type CalicoAddDelSnatPrefixReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CalicoAddDelSnatPrefixReply) Reset() { *m = CalicoAddDelSnatPrefixReply{} }
func (*CalicoAddDelSnatPrefixReply) GetMessageName() string {
	return "calico_add_del_snat_prefix_reply"
}
func (*CalicoAddDelSnatPrefixReply) GetCrcString() string { return "e8d4e804" }
func (*CalicoAddDelSnatPrefixReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoAddDelSnatPrefixReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CalicoAddDelSnatPrefixReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CalicoAddDelSnatPrefixReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CalicoSessionDetails defines message 'calico_session_details'.
type CalicoSessionDetails struct {
	Session CalicoSession `binapi:"calico_session,name=session" json:"session,omitempty"`
}

func (m *CalicoSessionDetails) Reset()               { *m = CalicoSessionDetails{} }
func (*CalicoSessionDetails) GetMessageName() string { return "calico_session_details" }
func (*CalicoSessionDetails) GetCrcString() string   { return "cd35d118" }
func (*CalicoSessionDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoSessionDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Session.Src.Addr.Af
	size += 1 * 16 // m.Session.Src.Addr.Un
	size += 2      // m.Session.Src.Port
	size += 1      // m.Session.Dst.Addr.Af
	size += 1 * 16 // m.Session.Dst.Addr.Un
	size += 2      // m.Session.Dst.Port
	size += 1      // m.Session.New.Addr.Af
	size += 1 * 16 // m.Session.New.Addr.Un
	size += 2      // m.Session.New.Port
	size += 1      // m.Session.IPProto
	size += 8      // m.Session.Timestamp
	return size
}
func (m *CalicoSessionDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Session.Src.Addr.Af))
	buf.EncodeBytes(m.Session.Src.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint16(m.Session.Src.Port)
	buf.EncodeUint8(uint8(m.Session.Dst.Addr.Af))
	buf.EncodeBytes(m.Session.Dst.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint16(m.Session.Dst.Port)
	buf.EncodeUint8(uint8(m.Session.New.Addr.Af))
	buf.EncodeBytes(m.Session.New.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint16(m.Session.New.Port)
	buf.EncodeUint8(uint8(m.Session.IPProto))
	buf.EncodeFloat64(m.Session.Timestamp)
	return buf.Bytes(), nil
}
func (m *CalicoSessionDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Session.Src.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Session.Src.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Session.Src.Port = buf.DecodeUint16()
	m.Session.Dst.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Session.Dst.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Session.Dst.Port = buf.DecodeUint16()
	m.Session.New.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Session.New.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Session.New.Port = buf.DecodeUint16()
	m.Session.IPProto = ip_types.IPProto(buf.DecodeUint8())
	m.Session.Timestamp = buf.DecodeFloat64()
	return nil
}

// CalicoSessionDump defines message 'calico_session_dump'.
type CalicoSessionDump struct{}

func (m *CalicoSessionDump) Reset()               { *m = CalicoSessionDump{} }
func (*CalicoSessionDump) GetMessageName() string { return "calico_session_dump" }
func (*CalicoSessionDump) GetCrcString() string   { return "51077d14" }
func (*CalicoSessionDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoSessionDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CalicoSessionDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CalicoSessionDump) Unmarshal(b []byte) error {
	return nil
}

// CalicoSessionPurge defines message 'calico_session_purge'.
type CalicoSessionPurge struct{}

func (m *CalicoSessionPurge) Reset()               { *m = CalicoSessionPurge{} }
func (*CalicoSessionPurge) GetMessageName() string { return "calico_session_purge" }
func (*CalicoSessionPurge) GetCrcString() string   { return "51077d14" }
func (*CalicoSessionPurge) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoSessionPurge) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CalicoSessionPurge) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CalicoSessionPurge) Unmarshal(b []byte) error {
	return nil
}

// CalicoSessionPurgeReply defines message 'calico_session_purge_reply'.
type CalicoSessionPurgeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CalicoSessionPurgeReply) Reset()               { *m = CalicoSessionPurgeReply{} }
func (*CalicoSessionPurgeReply) GetMessageName() string { return "calico_session_purge_reply" }
func (*CalicoSessionPurgeReply) GetCrcString() string   { return "e8d4e804" }
func (*CalicoSessionPurgeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoSessionPurgeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CalicoSessionPurgeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CalicoSessionPurgeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CalicoSetSnatAddresses defines message 'calico_set_snat_addresses'.
type CalicoSetSnatAddresses struct {
	SnatIP4 ip_types.IP4Address `binapi:"ip4_address,name=snat_ip4" json:"snat_ip4,omitempty"`
	SnatIP6 ip_types.IP6Address `binapi:"ip6_address,name=snat_ip6" json:"snat_ip6,omitempty"`
}

func (m *CalicoSetSnatAddresses) Reset()               { *m = CalicoSetSnatAddresses{} }
func (*CalicoSetSnatAddresses) GetMessageName() string { return "calico_set_snat_addresses" }
func (*CalicoSetSnatAddresses) GetCrcString() string   { return "88e41c10" }
func (*CalicoSetSnatAddresses) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoSetSnatAddresses) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4  // m.SnatIP4
	size += 1 * 16 // m.SnatIP6
	return size
}
func (m *CalicoSetSnatAddresses) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.SnatIP4[:], 4)
	buf.EncodeBytes(m.SnatIP6[:], 16)
	return buf.Bytes(), nil
}
func (m *CalicoSetSnatAddresses) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.SnatIP4[:], buf.DecodeBytes(4))
	copy(m.SnatIP6[:], buf.DecodeBytes(16))
	return nil
}

// CalicoSetSnatAddressesReply defines message 'calico_set_snat_addresses_reply'.
type CalicoSetSnatAddressesReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CalicoSetSnatAddressesReply) Reset()               { *m = CalicoSetSnatAddressesReply{} }
func (*CalicoSetSnatAddressesReply) GetMessageName() string { return "calico_set_snat_addresses_reply" }
func (*CalicoSetSnatAddressesReply) GetCrcString() string   { return "e8d4e804" }
func (*CalicoSetSnatAddressesReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoSetSnatAddressesReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CalicoSetSnatAddressesReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CalicoSetSnatAddressesReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CalicoTranslationDel defines message 'calico_translation_del'.
type CalicoTranslationDel struct {
	ID uint32 `binapi:"u32,name=id" json:"id,omitempty"`
}

func (m *CalicoTranslationDel) Reset()               { *m = CalicoTranslationDel{} }
func (*CalicoTranslationDel) GetMessageName() string { return "calico_translation_del" }
func (*CalicoTranslationDel) GetCrcString() string   { return "3a91bde5" }
func (*CalicoTranslationDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoTranslationDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ID
	return size
}
func (m *CalicoTranslationDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ID)
	return buf.Bytes(), nil
}
func (m *CalicoTranslationDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ID = buf.DecodeUint32()
	return nil
}

// CalicoTranslationDelReply defines message 'calico_translation_del_reply'.
type CalicoTranslationDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *CalicoTranslationDelReply) Reset()               { *m = CalicoTranslationDelReply{} }
func (*CalicoTranslationDelReply) GetMessageName() string { return "calico_translation_del_reply" }
func (*CalicoTranslationDelReply) GetCrcString() string   { return "e8d4e804" }
func (*CalicoTranslationDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoTranslationDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *CalicoTranslationDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *CalicoTranslationDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// CalicoTranslationDetails defines message 'calico_translation_details'.
type CalicoTranslationDetails struct {
	Translation CalicoTranslation `binapi:"calico_translation,name=translation" json:"translation,omitempty"`
}

func (m *CalicoTranslationDetails) Reset()               { *m = CalicoTranslationDetails{} }
func (*CalicoTranslationDetails) GetMessageName() string { return "calico_translation_details" }
func (*CalicoTranslationDetails) GetCrcString() string   { return "5589099f" }
func (*CalicoTranslationDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoTranslationDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Translation.Vip.Addr.Af
	size += 1 * 16 // m.Translation.Vip.Addr.Un
	size += 2      // m.Translation.Vip.Port
	size += 4      // m.Translation.ID
	size += 1      // m.Translation.IPProto
	size += 1      // m.Translation.IsRealIP
	size += 1      // m.Translation.Flags
	size += 1      // m.Translation.NPaths
	for j2 := 0; j2 < len(m.Translation.Paths); j2++ {
		var s2 CalicoEndpointTuple
		_ = s2
		if j2 < len(m.Translation.Paths) {
			s2 = m.Translation.Paths[j2]
		}
		size += 1      // s2.DstEp.Addr.Af
		size += 1 * 16 // s2.DstEp.Addr.Un
		size += 2      // s2.DstEp.Port
		size += 1      // s2.SrcEp.Addr.Af
		size += 1 * 16 // s2.SrcEp.Addr.Un
		size += 2      // s2.SrcEp.Port
	}
	return size
}
func (m *CalicoTranslationDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Translation.Vip.Addr.Af))
	buf.EncodeBytes(m.Translation.Vip.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint16(m.Translation.Vip.Port)
	buf.EncodeUint32(m.Translation.ID)
	buf.EncodeUint8(uint8(m.Translation.IPProto))
	buf.EncodeUint8(m.Translation.IsRealIP)
	buf.EncodeUint8(m.Translation.Flags)
	buf.EncodeUint8(uint8(len(m.Translation.Paths)))
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		var v1 CalicoEndpointTuple // Paths
		if j1 < len(m.Translation.Paths) {
			v1 = m.Translation.Paths[j1]
		}
		buf.EncodeUint8(uint8(v1.DstEp.Addr.Af))
		buf.EncodeBytes(v1.DstEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint16(v1.DstEp.Port)
		buf.EncodeUint8(uint8(v1.SrcEp.Addr.Af))
		buf.EncodeBytes(v1.SrcEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint16(v1.SrcEp.Port)
	}
	return buf.Bytes(), nil
}
func (m *CalicoTranslationDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Translation.Vip.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Translation.Vip.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Translation.Vip.Port = buf.DecodeUint16()
	m.Translation.ID = buf.DecodeUint32()
	m.Translation.IPProto = ip_types.IPProto(buf.DecodeUint8())
	m.Translation.IsRealIP = buf.DecodeUint8()
	m.Translation.Flags = buf.DecodeUint8()
	m.Translation.NPaths = buf.DecodeUint8()
	m.Translation.Paths = make([]CalicoEndpointTuple, m.Translation.NPaths)
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		m.Translation.Paths[j1].DstEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].DstEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].DstEp.Port = buf.DecodeUint16()
		m.Translation.Paths[j1].SrcEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].SrcEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].SrcEp.Port = buf.DecodeUint16()
	}
	return nil
}

// CalicoTranslationDump defines message 'calico_translation_dump'.
type CalicoTranslationDump struct{}

func (m *CalicoTranslationDump) Reset()               { *m = CalicoTranslationDump{} }
func (*CalicoTranslationDump) GetMessageName() string { return "calico_translation_dump" }
func (*CalicoTranslationDump) GetCrcString() string   { return "51077d14" }
func (*CalicoTranslationDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoTranslationDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *CalicoTranslationDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *CalicoTranslationDump) Unmarshal(b []byte) error {
	return nil
}

// CalicoTranslationUpdate defines message 'calico_translation_update'.
type CalicoTranslationUpdate struct {
	Translation CalicoTranslation `binapi:"calico_translation,name=translation" json:"translation,omitempty"`
}

func (m *CalicoTranslationUpdate) Reset()               { *m = CalicoTranslationUpdate{} }
func (*CalicoTranslationUpdate) GetMessageName() string { return "calico_translation_update" }
func (*CalicoTranslationUpdate) GetCrcString() string   { return "8ae876ba" }
func (*CalicoTranslationUpdate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CalicoTranslationUpdate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Translation.Vip.Addr.Af
	size += 1 * 16 // m.Translation.Vip.Addr.Un
	size += 2      // m.Translation.Vip.Port
	size += 4      // m.Translation.ID
	size += 1      // m.Translation.IPProto
	size += 1      // m.Translation.IsRealIP
	size += 1      // m.Translation.Flags
	size += 1      // m.Translation.NPaths
	for j2 := 0; j2 < len(m.Translation.Paths); j2++ {
		var s2 CalicoEndpointTuple
		_ = s2
		if j2 < len(m.Translation.Paths) {
			s2 = m.Translation.Paths[j2]
		}
		size += 1      // s2.DstEp.Addr.Af
		size += 1 * 16 // s2.DstEp.Addr.Un
		size += 2      // s2.DstEp.Port
		size += 1      // s2.SrcEp.Addr.Af
		size += 1 * 16 // s2.SrcEp.Addr.Un
		size += 2      // s2.SrcEp.Port
	}
	return size
}
func (m *CalicoTranslationUpdate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Translation.Vip.Addr.Af))
	buf.EncodeBytes(m.Translation.Vip.Addr.Un.XXX_UnionData[:], 16)
	buf.EncodeUint16(m.Translation.Vip.Port)
	buf.EncodeUint32(m.Translation.ID)
	buf.EncodeUint8(uint8(m.Translation.IPProto))
	buf.EncodeUint8(m.Translation.IsRealIP)
	buf.EncodeUint8(m.Translation.Flags)
	buf.EncodeUint8(uint8(len(m.Translation.Paths)))
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		var v1 CalicoEndpointTuple // Paths
		if j1 < len(m.Translation.Paths) {
			v1 = m.Translation.Paths[j1]
		}
		buf.EncodeUint8(uint8(v1.DstEp.Addr.Af))
		buf.EncodeBytes(v1.DstEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint16(v1.DstEp.Port)
		buf.EncodeUint8(uint8(v1.SrcEp.Addr.Af))
		buf.EncodeBytes(v1.SrcEp.Addr.Un.XXX_UnionData[:], 16)
		buf.EncodeUint16(v1.SrcEp.Port)
	}
	return buf.Bytes(), nil
}
func (m *CalicoTranslationUpdate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Translation.Vip.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Translation.Vip.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Translation.Vip.Port = buf.DecodeUint16()
	m.Translation.ID = buf.DecodeUint32()
	m.Translation.IPProto = ip_types.IPProto(buf.DecodeUint8())
	m.Translation.IsRealIP = buf.DecodeUint8()
	m.Translation.Flags = buf.DecodeUint8()
	m.Translation.NPaths = buf.DecodeUint8()
	m.Translation.Paths = make([]CalicoEndpointTuple, m.Translation.NPaths)
	for j1 := 0; j1 < len(m.Translation.Paths); j1++ {
		m.Translation.Paths[j1].DstEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].DstEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].DstEp.Port = buf.DecodeUint16()
		m.Translation.Paths[j1].SrcEp.Addr.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Translation.Paths[j1].SrcEp.Addr.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Translation.Paths[j1].SrcEp.Port = buf.DecodeUint16()
	}
	return nil
}

// CalicoTranslationUpdateReply defines message 'calico_translation_update_reply'.
type CalicoTranslationUpdateReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	ID     uint32 `binapi:"u32,name=id" json:"id,omitempty"`
}

func (m *CalicoTranslationUpdateReply) Reset() { *m = CalicoTranslationUpdateReply{} }
func (*CalicoTranslationUpdateReply) GetMessageName() string {
	return "calico_translation_update_reply"
}
func (*CalicoTranslationUpdateReply) GetCrcString() string { return "e2fc8294" }
func (*CalicoTranslationUpdateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CalicoTranslationUpdateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.ID
	return size
}
func (m *CalicoTranslationUpdateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.ID)
	return buf.Bytes(), nil
}
func (m *CalicoTranslationUpdateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.ID = buf.DecodeUint32()
	return nil
}

func init() { file_calico_binapi_init() }
func file_calico_binapi_init() {
	api.RegisterMessage((*CalicoAddDelSnatPrefix)(nil), "calico_add_del_snat_prefix_e26dd79a")
	api.RegisterMessage((*CalicoAddDelSnatPrefixReply)(nil), "calico_add_del_snat_prefix_reply_e8d4e804")
	api.RegisterMessage((*CalicoSessionDetails)(nil), "calico_session_details_cd35d118")
	api.RegisterMessage((*CalicoSessionDump)(nil), "calico_session_dump_51077d14")
	api.RegisterMessage((*CalicoSessionPurge)(nil), "calico_session_purge_51077d14")
	api.RegisterMessage((*CalicoSessionPurgeReply)(nil), "calico_session_purge_reply_e8d4e804")
	api.RegisterMessage((*CalicoSetSnatAddresses)(nil), "calico_set_snat_addresses_88e41c10")
	api.RegisterMessage((*CalicoSetSnatAddressesReply)(nil), "calico_set_snat_addresses_reply_e8d4e804")
	api.RegisterMessage((*CalicoTranslationDel)(nil), "calico_translation_del_3a91bde5")
	api.RegisterMessage((*CalicoTranslationDelReply)(nil), "calico_translation_del_reply_e8d4e804")
	api.RegisterMessage((*CalicoTranslationDetails)(nil), "calico_translation_details_5589099f")
	api.RegisterMessage((*CalicoTranslationDump)(nil), "calico_translation_dump_51077d14")
	api.RegisterMessage((*CalicoTranslationUpdate)(nil), "calico_translation_update_8ae876ba")
	api.RegisterMessage((*CalicoTranslationUpdateReply)(nil), "calico_translation_update_reply_e2fc8294")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CalicoAddDelSnatPrefix)(nil),
		(*CalicoAddDelSnatPrefixReply)(nil),
		(*CalicoSessionDetails)(nil),
		(*CalicoSessionDump)(nil),
		(*CalicoSessionPurge)(nil),
		(*CalicoSessionPurgeReply)(nil),
		(*CalicoSetSnatAddresses)(nil),
		(*CalicoSetSnatAddressesReply)(nil),
		(*CalicoTranslationDel)(nil),
		(*CalicoTranslationDelReply)(nil),
		(*CalicoTranslationDetails)(nil),
		(*CalicoTranslationDump)(nil),
		(*CalicoTranslationUpdate)(nil),
		(*CalicoTranslationUpdateReply)(nil),
	}
}
