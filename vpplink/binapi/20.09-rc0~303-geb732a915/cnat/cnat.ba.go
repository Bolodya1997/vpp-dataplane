// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /Users/aloaugus/src/calico-vpp-dataplane/vpp-manager/vpp_build/build-root/install-vpp-native/vpp/share/vpp/api//plugins/cnat.api.json

/*
Package cnat is a generated VPP binary API for 'cnat' module.

It consists of:
	  8 enums
	  5 aliases
	 13 types
	  1 union
	 14 messages
	  7 services
*/
package cnat

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "cnat"
	// APIVersion is the API version of this module.
	APIVersion = "0.1.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x351f668a
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// CnatTranslationFlags represents VPP binary API enum 'cnat_translation_flags'.
type CnatTranslationFlags uint8

const (
	CNAT_TRANSLATION_ALLOC_PORT CnatTranslationFlags = 1
)

var CnatTranslationFlags_name = map[uint8]string{
	1: "CNAT_TRANSLATION_ALLOC_PORT",
}

var CnatTranslationFlags_value = map[string]uint8{
	"CNAT_TRANSLATION_ALLOC_PORT": 1,
}

func (x CnatTranslationFlags) String() string {
	s, ok := CnatTranslationFlags_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// FibPathFlags represents VPP binary API enum 'fib_path_flags'.
type FibPathFlags uint32

const (
	FIB_API_PATH_FLAG_NONE                 FibPathFlags = 0
	FIB_API_PATH_FLAG_RESOLVE_VIA_ATTACHED FibPathFlags = 1
	FIB_API_PATH_FLAG_RESOLVE_VIA_HOST     FibPathFlags = 2
	FIB_API_PATH_FLAG_POP_PW_CW            FibPathFlags = 4
)

var FibPathFlags_name = map[uint32]string{
	0: "FIB_API_PATH_FLAG_NONE",
	1: "FIB_API_PATH_FLAG_RESOLVE_VIA_ATTACHED",
	2: "FIB_API_PATH_FLAG_RESOLVE_VIA_HOST",
	4: "FIB_API_PATH_FLAG_POP_PW_CW",
}

var FibPathFlags_value = map[string]uint32{
	"FIB_API_PATH_FLAG_NONE":                 0,
	"FIB_API_PATH_FLAG_RESOLVE_VIA_ATTACHED": 1,
	"FIB_API_PATH_FLAG_RESOLVE_VIA_HOST":     2,
	"FIB_API_PATH_FLAG_POP_PW_CW":            4,
}

func (x FibPathFlags) String() string {
	s, ok := FibPathFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// FibPathNhProto represents VPP binary API enum 'fib_path_nh_proto'.
type FibPathNhProto uint32

const (
	FIB_API_PATH_NH_PROTO_IP4      FibPathNhProto = 0
	FIB_API_PATH_NH_PROTO_IP6      FibPathNhProto = 1
	FIB_API_PATH_NH_PROTO_MPLS     FibPathNhProto = 2
	FIB_API_PATH_NH_PROTO_ETHERNET FibPathNhProto = 3
	FIB_API_PATH_NH_PROTO_BIER     FibPathNhProto = 4
)

var FibPathNhProto_name = map[uint32]string{
	0: "FIB_API_PATH_NH_PROTO_IP4",
	1: "FIB_API_PATH_NH_PROTO_IP6",
	2: "FIB_API_PATH_NH_PROTO_MPLS",
	3: "FIB_API_PATH_NH_PROTO_ETHERNET",
	4: "FIB_API_PATH_NH_PROTO_BIER",
}

var FibPathNhProto_value = map[string]uint32{
	"FIB_API_PATH_NH_PROTO_IP4":      0,
	"FIB_API_PATH_NH_PROTO_IP6":      1,
	"FIB_API_PATH_NH_PROTO_MPLS":     2,
	"FIB_API_PATH_NH_PROTO_ETHERNET": 3,
	"FIB_API_PATH_NH_PROTO_BIER":     4,
}

func (x FibPathNhProto) String() string {
	s, ok := FibPathNhProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// FibPathType represents VPP binary API enum 'fib_path_type'.
type FibPathType uint32

const (
	FIB_API_PATH_TYPE_NORMAL        FibPathType = 0
	FIB_API_PATH_TYPE_LOCAL         FibPathType = 1
	FIB_API_PATH_TYPE_DROP          FibPathType = 2
	FIB_API_PATH_TYPE_UDP_ENCAP     FibPathType = 3
	FIB_API_PATH_TYPE_BIER_IMP      FibPathType = 4
	FIB_API_PATH_TYPE_ICMP_UNREACH  FibPathType = 5
	FIB_API_PATH_TYPE_ICMP_PROHIBIT FibPathType = 6
	FIB_API_PATH_TYPE_SOURCE_LOOKUP FibPathType = 7
	FIB_API_PATH_TYPE_DVR           FibPathType = 8
	FIB_API_PATH_TYPE_INTERFACE_RX  FibPathType = 9
	FIB_API_PATH_TYPE_CLASSIFY      FibPathType = 10
)

var FibPathType_name = map[uint32]string{
	0:  "FIB_API_PATH_TYPE_NORMAL",
	1:  "FIB_API_PATH_TYPE_LOCAL",
	2:  "FIB_API_PATH_TYPE_DROP",
	3:  "FIB_API_PATH_TYPE_UDP_ENCAP",
	4:  "FIB_API_PATH_TYPE_BIER_IMP",
	5:  "FIB_API_PATH_TYPE_ICMP_UNREACH",
	6:  "FIB_API_PATH_TYPE_ICMP_PROHIBIT",
	7:  "FIB_API_PATH_TYPE_SOURCE_LOOKUP",
	8:  "FIB_API_PATH_TYPE_DVR",
	9:  "FIB_API_PATH_TYPE_INTERFACE_RX",
	10: "FIB_API_PATH_TYPE_CLASSIFY",
}

var FibPathType_value = map[string]uint32{
	"FIB_API_PATH_TYPE_NORMAL":        0,
	"FIB_API_PATH_TYPE_LOCAL":         1,
	"FIB_API_PATH_TYPE_DROP":          2,
	"FIB_API_PATH_TYPE_UDP_ENCAP":     3,
	"FIB_API_PATH_TYPE_BIER_IMP":      4,
	"FIB_API_PATH_TYPE_ICMP_UNREACH":  5,
	"FIB_API_PATH_TYPE_ICMP_PROHIBIT": 6,
	"FIB_API_PATH_TYPE_SOURCE_LOOKUP": 7,
	"FIB_API_PATH_TYPE_DVR":           8,
	"FIB_API_PATH_TYPE_INTERFACE_RX":  9,
	"FIB_API_PATH_TYPE_CLASSIFY":      10,
}

func (x FibPathType) String() string {
	s, ok := FibPathType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// CnatEndpoint represents VPP binary API type 'cnat_endpoint'.
type CnatEndpoint struct {
	Addr Address
	Port uint16
}

func (*CnatEndpoint) GetTypeName() string { return "cnat_endpoint" }

// CnatEndpointTuple represents VPP binary API type 'cnat_endpoint_tuple'.
type CnatEndpointTuple struct {
	DstEp CnatEndpoint
	SrcEp CnatEndpoint
}

func (*CnatEndpointTuple) GetTypeName() string { return "cnat_endpoint_tuple" }

// CnatSession represents VPP binary API type 'cnat_session'.
type CnatSession struct {
	Src       CnatEndpoint
	Dst       CnatEndpoint
	New       CnatEndpoint
	IPProto   IPProto
	Timestamp float64
}

func (*CnatSession) GetTypeName() string { return "cnat_session" }

// CnatTranslation represents VPP binary API type 'cnat_translation'.
type CnatTranslation struct {
	Vip      CnatEndpoint
	ID       uint32
	IPProto  IPProto
	IsRealIP uint8
	Flags    uint8
	NPaths   uint8 `struc:"sizeof=Paths"`
	Paths    []CnatEndpointTuple
}

func (*CnatTranslation) GetTypeName() string { return "cnat_translation" }

// FibMplsLabel represents VPP binary API type 'fib_mpls_label'.
type FibMplsLabel struct {
	IsUniform uint8
	Label     uint32
	TTL       uint8
	Exp       uint8
}

func (*FibMplsLabel) GetTypeName() string { return "fib_mpls_label" }

// FibPath represents VPP binary API type 'fib_path'.
type FibPath struct {
	SwIfIndex  uint32
	TableID    uint32
	RpfID      uint32
	Weight     uint8
	Preference uint8
	Type       FibPathType
	Flags      FibPathFlags
	Proto      FibPathNhProto
	Nh         FibPathNh
	NLabels    uint8
	LabelStack []FibMplsLabel `struc:"[16]FibMplsLabel"`
}

func (*FibPath) GetTypeName() string { return "fib_path" }

// FibPathNh represents VPP binary API type 'fib_path_nh'.
type FibPathNh struct {
	Address            AddressUnion
	ViaLabel           uint32
	ObjID              uint32
	ClassifyTableIndex uint32
}

func (*FibPathNh) GetTypeName() string { return "fib_path_nh" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// CnatAddDelSnatPrefix represents VPP binary API message 'cnat_add_del_snat_prefix'.
type CnatAddDelSnatPrefix struct {
	IsAdd  uint8
	Prefix Prefix
}

func (m *CnatAddDelSnatPrefix) Reset()                        { *m = CnatAddDelSnatPrefix{} }
func (*CnatAddDelSnatPrefix) GetMessageName() string          { return "cnat_add_del_snat_prefix" }
func (*CnatAddDelSnatPrefix) GetCrcString() string            { return "e26dd79a" }
func (*CnatAddDelSnatPrefix) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatAddDelSnatPrefixReply represents VPP binary API message 'cnat_add_del_snat_prefix_reply'.
type CnatAddDelSnatPrefixReply struct {
	Retval int32
}

func (m *CnatAddDelSnatPrefixReply) Reset()                        { *m = CnatAddDelSnatPrefixReply{} }
func (*CnatAddDelSnatPrefixReply) GetMessageName() string          { return "cnat_add_del_snat_prefix_reply" }
func (*CnatAddDelSnatPrefixReply) GetCrcString() string            { return "e8d4e804" }
func (*CnatAddDelSnatPrefixReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CnatSessionDetails represents VPP binary API message 'cnat_session_details'.
type CnatSessionDetails struct {
	Session CnatSession
}

func (m *CnatSessionDetails) Reset()                        { *m = CnatSessionDetails{} }
func (*CnatSessionDetails) GetMessageName() string          { return "cnat_session_details" }
func (*CnatSessionDetails) GetCrcString() string            { return "ccf8e02a" }
func (*CnatSessionDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// CnatSessionDump represents VPP binary API message 'cnat_session_dump'.
type CnatSessionDump struct{}

func (m *CnatSessionDump) Reset()                        { *m = CnatSessionDump{} }
func (*CnatSessionDump) GetMessageName() string          { return "cnat_session_dump" }
func (*CnatSessionDump) GetCrcString() string            { return "51077d14" }
func (*CnatSessionDump) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatSessionPurge represents VPP binary API message 'cnat_session_purge'.
type CnatSessionPurge struct{}

func (m *CnatSessionPurge) Reset()                        { *m = CnatSessionPurge{} }
func (*CnatSessionPurge) GetMessageName() string          { return "cnat_session_purge" }
func (*CnatSessionPurge) GetCrcString() string            { return "51077d14" }
func (*CnatSessionPurge) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatSessionPurgeReply represents VPP binary API message 'cnat_session_purge_reply'.
type CnatSessionPurgeReply struct {
	Retval int32
}

func (m *CnatSessionPurgeReply) Reset()                        { *m = CnatSessionPurgeReply{} }
func (*CnatSessionPurgeReply) GetMessageName() string          { return "cnat_session_purge_reply" }
func (*CnatSessionPurgeReply) GetCrcString() string            { return "e8d4e804" }
func (*CnatSessionPurgeReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CnatSetSnatAddresses represents VPP binary API message 'cnat_set_snat_addresses'.
type CnatSetSnatAddresses struct {
	SnatIP4 IP4Address
	SnatIP6 IP6Address
}

func (m *CnatSetSnatAddresses) Reset()                        { *m = CnatSetSnatAddresses{} }
func (*CnatSetSnatAddresses) GetMessageName() string          { return "cnat_set_snat_addresses" }
func (*CnatSetSnatAddresses) GetCrcString() string            { return "88e41c10" }
func (*CnatSetSnatAddresses) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatSetSnatAddressesReply represents VPP binary API message 'cnat_set_snat_addresses_reply'.
type CnatSetSnatAddressesReply struct {
	Retval int32
}

func (m *CnatSetSnatAddressesReply) Reset()                        { *m = CnatSetSnatAddressesReply{} }
func (*CnatSetSnatAddressesReply) GetMessageName() string          { return "cnat_set_snat_addresses_reply" }
func (*CnatSetSnatAddressesReply) GetCrcString() string            { return "e8d4e804" }
func (*CnatSetSnatAddressesReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CnatTranslationDel represents VPP binary API message 'cnat_translation_del'.
type CnatTranslationDel struct {
	ID uint32
}

func (m *CnatTranslationDel) Reset()                        { *m = CnatTranslationDel{} }
func (*CnatTranslationDel) GetMessageName() string          { return "cnat_translation_del" }
func (*CnatTranslationDel) GetCrcString() string            { return "3a91bde5" }
func (*CnatTranslationDel) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatTranslationDelReply represents VPP binary API message 'cnat_translation_del_reply'.
type CnatTranslationDelReply struct {
	Retval int32
}

func (m *CnatTranslationDelReply) Reset()                        { *m = CnatTranslationDelReply{} }
func (*CnatTranslationDelReply) GetMessageName() string          { return "cnat_translation_del_reply" }
func (*CnatTranslationDelReply) GetCrcString() string            { return "e8d4e804" }
func (*CnatTranslationDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// CnatTranslationDetails represents VPP binary API message 'cnat_translation_details'.
type CnatTranslationDetails struct {
	Translation CnatTranslation
}

func (m *CnatTranslationDetails) Reset()                        { *m = CnatTranslationDetails{} }
func (*CnatTranslationDetails) GetMessageName() string          { return "cnat_translation_details" }
func (*CnatTranslationDetails) GetCrcString() string            { return "dbd81950" }
func (*CnatTranslationDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// CnatTranslationDump represents VPP binary API message 'cnat_translation_dump'.
type CnatTranslationDump struct{}

func (m *CnatTranslationDump) Reset()                        { *m = CnatTranslationDump{} }
func (*CnatTranslationDump) GetMessageName() string          { return "cnat_translation_dump" }
func (*CnatTranslationDump) GetCrcString() string            { return "51077d14" }
func (*CnatTranslationDump) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatTranslationUpdate represents VPP binary API message 'cnat_translation_update'.
type CnatTranslationUpdate struct {
	Translation CnatTranslation
}

func (m *CnatTranslationUpdate) Reset()                        { *m = CnatTranslationUpdate{} }
func (*CnatTranslationUpdate) GetMessageName() string          { return "cnat_translation_update" }
func (*CnatTranslationUpdate) GetCrcString() string            { return "0d3bf624" }
func (*CnatTranslationUpdate) GetMessageType() api.MessageType { return api.RequestMessage }

// CnatTranslationUpdateReply represents VPP binary API message 'cnat_translation_update_reply'.
type CnatTranslationUpdateReply struct {
	Retval int32
	ID     uint32
}

func (m *CnatTranslationUpdateReply) Reset()                        { *m = CnatTranslationUpdateReply{} }
func (*CnatTranslationUpdateReply) GetMessageName() string          { return "cnat_translation_update_reply" }
func (*CnatTranslationUpdateReply) GetCrcString() string            { return "e2fc8294" }
func (*CnatTranslationUpdateReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*CnatAddDelSnatPrefix)(nil), "cnat.CnatAddDelSnatPrefix")
	api.RegisterMessage((*CnatAddDelSnatPrefixReply)(nil), "cnat.CnatAddDelSnatPrefixReply")
	api.RegisterMessage((*CnatSessionDetails)(nil), "cnat.CnatSessionDetails")
	api.RegisterMessage((*CnatSessionDump)(nil), "cnat.CnatSessionDump")
	api.RegisterMessage((*CnatSessionPurge)(nil), "cnat.CnatSessionPurge")
	api.RegisterMessage((*CnatSessionPurgeReply)(nil), "cnat.CnatSessionPurgeReply")
	api.RegisterMessage((*CnatSetSnatAddresses)(nil), "cnat.CnatSetSnatAddresses")
	api.RegisterMessage((*CnatSetSnatAddressesReply)(nil), "cnat.CnatSetSnatAddressesReply")
	api.RegisterMessage((*CnatTranslationDel)(nil), "cnat.CnatTranslationDel")
	api.RegisterMessage((*CnatTranslationDelReply)(nil), "cnat.CnatTranslationDelReply")
	api.RegisterMessage((*CnatTranslationDetails)(nil), "cnat.CnatTranslationDetails")
	api.RegisterMessage((*CnatTranslationDump)(nil), "cnat.CnatTranslationDump")
	api.RegisterMessage((*CnatTranslationUpdate)(nil), "cnat.CnatTranslationUpdate")
	api.RegisterMessage((*CnatTranslationUpdateReply)(nil), "cnat.CnatTranslationUpdateReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CnatAddDelSnatPrefix)(nil),
		(*CnatAddDelSnatPrefixReply)(nil),
		(*CnatSessionDetails)(nil),
		(*CnatSessionDump)(nil),
		(*CnatSessionPurge)(nil),
		(*CnatSessionPurgeReply)(nil),
		(*CnatSetSnatAddresses)(nil),
		(*CnatSetSnatAddressesReply)(nil),
		(*CnatTranslationDel)(nil),
		(*CnatTranslationDelReply)(nil),
		(*CnatTranslationDetails)(nil),
		(*CnatTranslationDump)(nil),
		(*CnatTranslationUpdate)(nil),
		(*CnatTranslationUpdateReply)(nil),
	}
}

// RPCService represents RPC service API for cnat module.
type RPCService interface {
	DumpCnatSession(ctx context.Context, in *CnatSessionDump) (RPCService_DumpCnatSessionClient, error)
	DumpCnatTranslation(ctx context.Context, in *CnatTranslationDump) (RPCService_DumpCnatTranslationClient, error)
	CnatAddDelSnatPrefix(ctx context.Context, in *CnatAddDelSnatPrefix) (*CnatAddDelSnatPrefixReply, error)
	CnatSessionPurge(ctx context.Context, in *CnatSessionPurge) (*CnatSessionPurgeReply, error)
	CnatSetSnatAddresses(ctx context.Context, in *CnatSetSnatAddresses) (*CnatSetSnatAddressesReply, error)
	CnatTranslationDel(ctx context.Context, in *CnatTranslationDel) (*CnatTranslationDelReply, error)
	CnatTranslationUpdate(ctx context.Context, in *CnatTranslationUpdate) (*CnatTranslationUpdateReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpCnatSession(ctx context.Context, in *CnatSessionDump) (RPCService_DumpCnatSessionClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpCnatSessionClient{stream}
	return x, nil
}

type RPCService_DumpCnatSessionClient interface {
	Recv() (*CnatSessionDetails, error)
}

type serviceClient_DumpCnatSessionClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpCnatSessionClient) Recv() (*CnatSessionDetails, error) {
	m := new(CnatSessionDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpCnatTranslation(ctx context.Context, in *CnatTranslationDump) (RPCService_DumpCnatTranslationClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpCnatTranslationClient{stream}
	return x, nil
}

type RPCService_DumpCnatTranslationClient interface {
	Recv() (*CnatTranslationDetails, error)
}

type serviceClient_DumpCnatTranslationClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpCnatTranslationClient) Recv() (*CnatTranslationDetails, error) {
	m := new(CnatTranslationDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) CnatAddDelSnatPrefix(ctx context.Context, in *CnatAddDelSnatPrefix) (*CnatAddDelSnatPrefixReply, error) {
	out := new(CnatAddDelSnatPrefixReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CnatSessionPurge(ctx context.Context, in *CnatSessionPurge) (*CnatSessionPurgeReply, error) {
	out := new(CnatSessionPurgeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CnatSetSnatAddresses(ctx context.Context, in *CnatSetSnatAddresses) (*CnatSetSnatAddressesReply, error) {
	out := new(CnatSetSnatAddressesReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CnatTranslationDel(ctx context.Context, in *CnatTranslationDel) (*CnatTranslationDelReply, error) {
	out := new(CnatTranslationDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CnatTranslationUpdate(ctx context.Context, in *CnatTranslationUpdate) (*CnatTranslationUpdateReply, error) {
	out := new(CnatTranslationUpdateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
